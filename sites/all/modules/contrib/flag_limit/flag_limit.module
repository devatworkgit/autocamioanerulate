<?php

/**
 * @file Flag limit module
 *
 * Limits the number of flagged items at any time to X.
 *
 * Intended for the following use case: A specified number of flagged
 * items needs to appear in a rotator at the top of a page.  When a new
 * item is marked as flagged, the oldest item marked as flagged needs to
 * move from the rotator, into a list of unflagged content below.
 */

/**
 * Implements hook_menu().
 */
function flag_limit_menu() {
  $items = array();

  $items['admin/structure/flags/limits'] = array(
    'title' => 'Limits',
    'description' => 'Configure limits on the number of flagged items.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_limit_settings_form'),
    'access arguments' => array('administer flags'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Flag settings form.
 */
function flag_limit_settings_form($form, &$form_state) {
  $form = array();

  $flags = flag_get_flags();
  foreach ($flags as $flag) {
    $form['flag_limit_' . $flag->name] = array(
      '#type' => 'checkbox',
      '#title' => t('Impose a Limit on %flag', array('%flag' => $flag->title)),
      '#default_value' => variable_get('flag_limit_' . $flag->name, FALSE),
    );

    $form['flag_limit_' . $flag->name . '_value'] = array(
      '#type' => 'textfield',
      '#title' => t('!flag Limit', array('!flag' => $flag->title)),
      '#description' => t('Maximum number of items that can be flagged per user at one time with <em>%flag</em>. 0 for unlimited', array('%flag' => $flag->title)),
      '#default_value' => variable_get('flag_limit_' . $flag->name . '_value', 0),
    );

    $form['flag_limit_' . $flag->name . '_peritem_value'] = array(
      '#type' => 'textfield',
      '#title' => t('!flag Limit Per Item', array('!flag' => $flag->title)),
      '#description' => t('Maximum number of times that each item can be flagged across all users with <em>%flag</em>. 0 for unlimited', array('%flag' => $flag->title)),
      '#default_value' => variable_get('flag_limit_' . $flag->name . '_peritem_value', 0),
    );
  }

  return system_settings_form($form);
}

/**
 * Implementation of hook_flag_flag(). Unflag any over-limit flags as appropriate.
 */
function flag_limit_flag_flag($flag, $entity_id, $account, $flagging_id) {
  $limited = variable_get('flag_limit_' . $flag->name, FALSE);
  if ($limited) {

    // Get the flag limits.
    $flag_limit = variable_get('flag_limit_' . $flag->name . '_value', 0);
    $peritem_limit = variable_get('flag_limit_' . $flag->name . '_peritem_value', 0);
    $sid = flag_get_sid($account->uid);

    if ($flag_limit) {
      // Get all the current flags by that user or anonymous.
      $query = "SELECT * FROM {flagging} WHERE fid = :fid AND uid IN (:uid, 0) AND sid IN (:sid, 0) ORDER BY timestamp DESC";
      $result = db_query($query, array(':fid' => $flag->fid, ':uid' => $account->uid, ':sid' => $sid));
      $i = 1;
      foreach ($result as $row) {
        if ($i++ > $flag_limit) {
          flag('unflag', $flag->name, $row->entity_id, $account);
          $subs = array('@flag' => $flag->name, '@num' => $flag_limit);
          drupal_set_message(t($message, $subs),'error', FALSE);
        }
      }
    }
    
    if ($peritem_limit) {
      //$query = "SELECT * FROM {flag_content} WHERE fid = :fid AND entity_id = :entity_id ORDER BY timestamp ASC";
      //$result = db_query($query, array(':fid' => $flag->fid, ':entity_id' => $entity_id));
      $query = db_select('flagging', 'f')
        ->fields('f', array('entity_type', 'entity_id', 'uid'))
        ->condition('fid', $flag->fid)
        ->condition('entity_type', $flag->entity_type)
        ->condition('entity_id', $entity_id);
      $result = $query->execute();
      $i = 1;
      foreach ($result as $row) {
        if ($i++ > $peritem_limit) {
          flag('unflag', $flag->name, $row->entity_id, user_load($row->uid));
        }
      }
    }
  }
}

/**
 * Preprocess function for flag link displays.
 */
function flag_limit_preprocess_flag(&$variables) {
  if ($variables['action'] == 'flag' && variable_get('flag_limit_' . $variables['flag']->name, FALSE) &&
      $peritem_limit = variable_get('flag_limit_' . $variables['flag']->name . '_peritem_value', 0)) {
    // Flag per-item limits are in place.
    $limit = flag_get_counts($variables['flag']->content_type, $variables['content_id']);
    $name = $variables['flag']->name;
    if (isset($limit[$name]) && $limit[$name] >= $peritem_limit) {
      // Make the flag link plain text.
      $variables['link_href'] = '';
      $variables['link_text'] = $variables['flag']->unflag_short;
    }
  }
}